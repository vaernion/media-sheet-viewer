{"version":3,"sources":["components/Stats/StatsGames.tsx","components/Stats/config.ts","components/Stats/Infobox.tsx"],"names":["StatsGames","document","title","className","config","gameGenresConfig","large","gameYearsConfig","gameGenresYearsConfig","console","log","stats","defaultConfig","display","fontSize","filmGenresConfig","type","data","labels","filmGenres","map","e","name","datasets","label","sum","backgroundColor","palette","length","hex","options","text","filmYearsConfig","filmYears","year","filmGenresYearsConfig","tvGenresConfig","tvGenres","tvYearsConfig","tvYears","gameGenres","gameYears","Infobox","canvasRef","React","current","Chart","ref"],"mappings":"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","file":"static/js/14.dd0386f9.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"../../styles/color.css\";\nimport {\n  gameGenresConfig,\n  gameGenresYearsConfig,\n  gameYearsConfig,\n} from \"./config\";\nimport { Infobox } from \"./Infobox\";\nimport \"./Stats.css\";\n\nexport default function StatsGames() {\n  document.title = \"Games Stats - MediaSheetViewer\";\n\n  return (\n    <>\n      <div className=\"stats\">\n        <div className=\"stats-head\">\n          <h2 className=\"stats-title\">Stats - Games</h2>\n        </div>\n        <div className=\"stats-body\">\n          <Infobox config={gameGenresConfig} large />\n          <Infobox config={gameYearsConfig} />\n          <Infobox config={gameGenresYearsConfig} large />\n        </div>\n      </div>\n    </>\n  );\n}\n","import Chart from \"chart.js\";\nimport palette from \"google-palette\";\nimport { stats } from \"../Store/mediaSheet\";\n\nconsole.log(stats);\n\nconst defaultConfig = {\n  options: {\n    title: {\n      display: true,\n      fontSize: 14,\n    },\n  },\n};\n\n/* ***********\nFILM\n*********** */\nexport const filmGenresConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.filmGenres.map((e) => e.name),\n    datasets: [\n      {\n        label: \"# of films\",\n        data: stats.filmGenres.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.filmGenres.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      ...defaultConfig.options.title,\n      text: \"Genres\",\n    },\n  },\n};\n\nexport const filmYearsConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.filmYears.map((e) => e.year),\n    datasets: [\n      {\n        label: \"# of films\",\n        data: stats.filmYears.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.filmYears.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      ...defaultConfig.options.title,\n      text: \"Years\",\n    },\n  },\n};\n\nexport const filmGenresYearsConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.filmYears.map((e) => e.year),\n    datasets: [\n      {\n        label: \"# of films\",\n        data: stats.filmYears.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.filmYears.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      ...defaultConfig.options.title,\n      text: \"Genres per years\",\n    },\n  },\n};\n\n/* ***********\nTV\n*********** */\nexport const tvGenresConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.tvGenres.map((e) => e.name),\n    datasets: [\n      {\n        label: \"# of series\",\n        data: stats.tvGenres.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.tvGenres.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      ...defaultConfig.options.title,\n      text: \"Genres\",\n    },\n  },\n};\n\nexport const tvYearsConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.tvYears.map((e) => e.year),\n    datasets: [\n      {\n        label: \"# of series\",\n        data: stats.tvYears.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.tvYears.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      ...defaultConfig.options.title,\n      text: \"Years\",\n    },\n  },\n};\n\n/* ***********\nGAME\n*********** */\nexport const gameGenresConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.gameGenres.map((e) => e.name),\n    datasets: [\n      {\n        label: \"# of games\",\n        data: stats.gameGenres.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.gameGenres.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      ...defaultConfig.options.title,\n      text: \"Genres\",\n    },\n  },\n};\n\nexport const gameYearsConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.gameYears.map((e) => e.year),\n    datasets: [\n      {\n        label: \"# of games\",\n        data: stats.gameYears.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.gameYears.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      ...defaultConfig.options.title,\n      text: \"Years\",\n    },\n  },\n};\n\nexport const gameGenresYearsConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.gameYears.map((e) => e.year),\n    datasets: [\n      {\n        label: \"# of games\",\n        data: stats.gameYears.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.gameYears.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      ...defaultConfig.options.title,\n      text: \"Genres per years\",\n    },\n  },\n};\n","import Chart from \"chart.js\";\nimport * as React from \"react\";\n\nexport function Infobox({\n  config,\n  large,\n}: {\n  config: Chart.ChartConfiguration;\n  large?: boolean;\n}) {\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n\n  React.useEffect(() => {\n    if (canvasRef.current) {\n      new Chart(canvasRef.current, config);\n    }\n  }, [canvasRef, config]);\n\n  return (\n    <>\n      <div className=\"stats-infobox\">\n        <div className={large ? \"canvas-container-large\" : \"canvas-container\"}>\n          <canvas ref={canvasRef}></canvas>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}