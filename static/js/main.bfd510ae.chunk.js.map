{"version":3,"sources":["classes/Film.jsx","components/Store/index.jsx","components/ErrorBoundary.jsx","components/Spinner/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Film","film","this","id","_count","title","translatedTitle","sortTitle","director","split","push","trim","genre","year","franchise","films","i","filmsRaw","length","filmsSortedTitleAsc","sort","a","b","localeCompare","filmsSortedTitleDesc","reverse","filmsSortedYearAsc","filmsSortedYearDesc","filmsSortedDirectorAsc","pop","filmsSorted","titleAsc","titleDesc","yearAsc","yearDesc","directorAsc","directorDesc","franchiseAsc","franchiseDesc","MediaContext","React","initialState","count","storeReducer","state","action","type","Store","props","store","dispatch","Provider","value","children","ErrorBoundary","hasError","error","errorInfo","setState","Spinner","className","Home","FilmList","FilmDetails","NotFound","menu","path","exact","name","routes","component","App","basename","map","e","activeClassName","key","to","fallback","route","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bfd510ae.chunk.js","sourcesContent":["import filmsRaw from \"../data/films.json\";\n\nexport class Film {\n  static _count = 0;\n  constructor(film) {\n    this.id = Film._count += 1;\n    this.title = film[\"Original title (romanized)\"];\n    this.translatedTitle = film[\"This release's translation/title\"];\n    this.sortTitle = film[\"Sort\"];\n    this.director = [];\n    for (let director of film[\"Director(s)\"].split(/[,/]+/)) {\n      this.director.push(director.trim());\n    }\n    this.genre = [];\n    for (let genre of film[\"Genres\"].split(/[,/|]+/)) {\n      this.genre.push(genre.trim());\n    }\n    this.year = film[\"Year\"];\n    this.franchise = film[\"Series/Universe\"];\n  }\n}\n\nexport const films = [];\nfor (let i = 0; i < filmsRaw.length; i++) {\n  films.push(new Film(filmsRaw[i]));\n}\n\nconst filmsSortedTitleAsc = [...films].sort((a, b) => {\n  return a.sortTitle.localeCompare(b.sortTitle);\n});\nconst filmsSortedTitleDesc = [...filmsSortedTitleAsc].reverse();\nconst filmsSortedYearAsc = [...films].sort((a, b) => a.year - b.year);\nconst filmsSortedYearDesc = [...filmsSortedYearAsc].reverse();\nconst filmsSortedDirectorAsc = [...films].sort((a, b) => {\n  a = a.director[0].split(\" \").pop();\n  b = b.director[0].split(\" \").pop();\n  return a.localeCompare(b);\n});\nconst filmsSortedDirectorDesc = [...filmsSortedDirectorAsc].reverse();\nconst filmsSortedFranchiseAsc = [...films].sort((a, b) => {\n  if (a.franchise === \"\") return 1;\n  if (b.franchise === \"\") return -1;\n  return a.franchise.localeCompare(b.franchise);\n});\nconst filmsSortedFranchiseDesc = [...films].sort((a, b) => {\n  if (a.franchise === \"\") return 1;\n  if (b.franchise === \"\") return -1;\n  return b.franchise.localeCompare(a.franchise);\n});\n\nexport const filmsSorted = {\n  titleAsc: filmsSortedTitleAsc,\n  titleDesc: filmsSortedTitleDesc,\n  yearAsc: filmsSortedYearAsc,\n  yearDesc: filmsSortedYearDesc,\n  directorAsc: filmsSortedDirectorAsc,\n  directorDesc: filmsSortedDirectorDesc,\n  franchiseAsc: filmsSortedFranchiseAsc,\n  franchiseDesc: filmsSortedFranchiseDesc,\n};\n","import * as React from \"react\";\nimport { films, filmsSorted } from \"../../classes/Film\";\n\nexport const MediaContext = React.createContext();\n\nconst initialState = { count: 0 };\n\nconst storeReducer = (state, action) => {\n  switch (action.type) {\n    case \"reset\":\n      return initialState;\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\nexport default function Store(props) {\n  //   const mediaContext = { films, filmsSorted };\n  const [store, dispatch] = React.useReducer(storeReducer, initialState);\n\n  return (\n    <>\n      <MediaContext.Provider value={{ store, dispatch, films, filmsSorted }}>\n        {props.children}\n      </MediaContext.Provider>\n    </>\n  );\n}\n","import * as React from \"react\";\n\nexport class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false, error: null, errorInfo: null };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, errorInfo);\n    this.setState({ error: error, errorInfo: errorInfo });\n  }\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return (\n        <>\n          <h1>Something went wrong.</h1>\n          {this.state.error}\n          {this.state.errorInfo}\n        </>\n      );\n    }\n    return this.props.children;\n  }\n}\n","import * as React from \"react\";\nimport \"./spinner.css\";\n\nexport function Spinner() {\n  return (\n    <>\n      <div className=\"spinner\"></div>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport {\n  BrowserRouter as Router,\n  NavLink,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport \"./app.css\";\nimport { ErrorBoundary } from \"./components/ErrorBoundary\";\nimport { Spinner } from \"./components/Spinner\";\nimport Store from \"./components/Store\";\n\n// import FilmDetails from \"./components/FilmDetails\";\n// import FilmList from \"./components/FilmList\";\n// import Home from \"./components/Home\";\n// import NotFound from \"./components/NotFound\";\n\nconst Home = React.lazy(() => import(\"./components/Home\"));\nconst FilmList = React.lazy(() => import(\"./components/FilmList\"));\nconst FilmDetails = React.lazy(() => import(\"./components/FilmDetails\"));\nconst NotFound = React.lazy(() => import(\"./components/NotFound\"));\n\nconst menu = [\n  { path: \"/\", exact: true, name: \"Home\" },\n  { path: \"/films\", name: \"Films\" },\n  { path: \"/tv\", name: \"TV\" },\n  { path: \"/Wnnwkeqnkrnkqw124214\", name: \"void\" },\n  { path: \"/spintest\", name: \"spinner\" },\n];\n\nconst routes = [\n  { path: \"/\", exact: true, component: <Home /> },\n  { path: \"/films\", exact: true, component: <FilmList /> },\n  { path: \"/films/:filmId\", component: <FilmDetails /> },\n  { path: \"/spintest\", component: <Spinner /> },\n  { path: \"*\", component: <NotFound /> },\n];\n\nfunction App() {\n  return (\n    <>\n      <ErrorBoundary>\n        <Router basename=\"/media-sheet-viewer\">\n          <div className=\"headerContainer\">\n            <div className=\"menuItems\">\n              {menu.map((e) => (\n                <NavLink\n                  className=\"menuLink\"\n                  activeClassName=\"menuLinkActive\"\n                  key={e.name}\n                  to={e.path}\n                  exact={e.exact}\n                >\n                  {e.name}\n                </NavLink>\n              ))}\n            </div>\n          </div>\n          <div className=\"bodyContainer\">\n            <React.Suspense fallback={<Spinner />}>\n              <Store>\n                <Switch>\n                  {routes.map((route) => (\n                    <Route\n                      key={route.path}\n                      path={route.path}\n                      exact={route.exact}\n                    >\n                      {route.component}\n                    </Route>\n                  ))}\n                </Switch>\n              </Store>\n            </React.Suspense>\n          </div>\n        </Router>\n      </ErrorBoundary>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}