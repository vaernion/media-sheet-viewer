{"version":3,"sources":["components/Stats/StatsGames.tsx","components/Stats/config.ts","components/Stats/Infobox.tsx"],"names":["StatsGames","document","title","className","config","gameGenresPerYearsConfig","large","gameGenresConfig","gameYearsConfig","console","log","stats","filmGenresConfig","type","data","labels","filmGenres","map","e","name","datasets","label","sum","backgroundColor","palette","length","hex","options","text","filmYearsConfig","filmYears","year","pointBackgroundColor","filmGenresPerYearsConfig","filmGenre","genreIndex","filmYear","genres","findIndex","tooltips","filter","tooltipItem","Number","value","intersect","mode","scales","xAxes","stacked","yAxes","tvGenresConfig","tvGenres","tvYearsConfig","tvYears","tvGenresPerYearsConfig","tvGenre","tvYear","gameGenres","gameYears","gameGenre","gameYear","Infobox","canvasRef","React","current","Chart","ref","defaults","global","display","fontSize"],"mappings":"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","file":"static/js/14.7050bb1d.chunk.js","sourcesContent":["import * as React from \"react\";\nimport \"../../styles/color.css\";\nimport {\n  gameGenresConfig,\n  gameGenresPerYearsConfig,\n  gameYearsConfig,\n} from \"./config\";\nimport { Infobox } from \"./Infobox\";\nimport \"./Stats.css\";\n\nexport default function StatsGames() {\n  document.title = \"Games Stats - MediaSheetViewer\";\n\n  return (\n    <>\n      <div className=\"stats\">\n        <div className=\"stats-head\">\n          <h2 className=\"stats-title\">Stats - Games</h2>\n        </div>\n        <div className=\"stats-body\">\n          <Infobox config={gameGenresPerYearsConfig} large />\n          <Infobox config={gameGenresConfig} large />\n          <Infobox config={gameYearsConfig} />\n        </div>\n      </div>\n    </>\n  );\n}\n","import Chart from \"chart.js\";\nimport palette from \"google-palette\";\nimport { stats } from \"../Store/mediaSheet\";\n\nconsole.log(stats);\n\n/* ***********\nFILM\n*********** */\nexport const filmGenresConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.filmGenres.map((e) => e.name),\n    datasets: [\n      {\n        label: \"# of films\",\n        data: stats.filmGenres.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.filmGenres.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      text: \"Genres\",\n    },\n  },\n};\n\nexport const filmYearsConfig: Chart.ChartConfiguration = {\n  type: \"line\",\n  data: {\n    labels: stats.filmYears.map((e) => e.year),\n    datasets: [\n      {\n        label: \"# of films\",\n        data: stats.filmYears.map((e) => e.sum),\n        pointBackgroundColor: palette(\"tol-sq\", stats.filmYears.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n        backgroundColor: \"grey\",\n      },\n    ],\n  },\n  options: {\n    title: {\n      text: \"Years\",\n    },\n  },\n};\n\nexport const filmGenresPerYearsConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.filmYears.map((e) => e.year),\n    datasets: stats.filmGenres.map((filmGenre, genreIndex) => ({\n      label: filmGenre.name,\n      data: stats.filmYears.map(\n        (filmYear) =>\n          filmYear.genres[\n            filmYear.genres.findIndex((e) => e.name === filmGenre.name)\n          ].sum\n      ),\n      backgroundColor: palette(\"mpn65\", stats.filmGenres.length).map(\n        (hex: string) => \"#\" + hex\n      )[genreIndex],\n    })),\n  },\n  options: {\n    title: {\n      text: \"Genres per year\",\n    },\n    tooltips: {\n      filter: (tooltipItem) => Number(tooltipItem.value) > 0,\n      intersect: false,\n      mode: \"index\",\n    },\n    scales: {\n      xAxes: [\n        {\n          stacked: true,\n        },\n      ],\n      yAxes: [\n        {\n          stacked: true,\n        },\n      ],\n    },\n  },\n};\n\n/* ***********\nTV\n*********** */\nexport const tvGenresConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.tvGenres.map((e) => e.name),\n    datasets: [\n      {\n        label: \"# of series\",\n        data: stats.tvGenres.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.tvGenres.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      text: \"Genres\",\n    },\n  },\n};\n\nexport const tvYearsConfig: Chart.ChartConfiguration = {\n  type: \"line\",\n  data: {\n    labels: stats.tvYears.map((e) => e.year),\n    datasets: [\n      {\n        label: \"# of series\",\n        data: stats.tvYears.map((e) => e.sum),\n        pointBackgroundColor: palette(\"tol-sq\", stats.tvYears.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n        backgroundColor: \"grey\",\n      },\n    ],\n  },\n  options: {\n    title: {\n      text: \"Years\",\n    },\n  },\n};\n\nexport const tvGenresPerYearsConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.tvYears.map((e) => e.year),\n    datasets: stats.tvGenres.map((tvGenre, genreIndex) => ({\n      label: tvGenre.name,\n      data: stats.tvYears.map(\n        (tvYear) =>\n          tvYear.genres[tvYear.genres.findIndex((e) => e.name === tvGenre.name)]\n            .sum\n      ),\n      backgroundColor: palette(\"mpn65\", stats.tvGenres.length).map(\n        (hex: string) => \"#\" + hex\n      )[genreIndex],\n    })),\n  },\n  options: {\n    title: {\n      text: \"Genres per year\",\n    },\n    tooltips: {\n      filter: (tooltipItem) => Number(tooltipItem.value) > 0,\n      intersect: false,\n      mode: \"index\",\n    },\n    scales: {\n      xAxes: [\n        {\n          stacked: true,\n        },\n      ],\n      yAxes: [\n        {\n          stacked: true,\n        },\n      ],\n    },\n  },\n};\n\n/* ***********\nGAME\n*********** */\nexport const gameGenresConfig: Chart.ChartConfiguration = {\n  type: \"doughnut\",\n  data: {\n    labels: stats.gameGenres.map((e) => e.name),\n    datasets: [\n      {\n        label: \"# of games\",\n        data: stats.gameGenres.map((e) => e.sum),\n        backgroundColor: palette(\"tol-rainbow\", stats.gameGenres.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n      },\n    ],\n  },\n  options: {\n    title: {\n      text: \"Genres\",\n    },\n  },\n};\n\nexport const gameYearsConfig: Chart.ChartConfiguration = {\n  type: \"line\",\n  data: {\n    labels: stats.gameYears.map((e) => e.year),\n    datasets: [\n      {\n        label: \"# of games\",\n        data: stats.gameYears.map((e) => e.sum),\n        pointBackgroundColor: palette(\"tol-sq\", stats.gameYears.length).map(\n          (hex: string) => \"#\" + hex\n        ),\n        backgroundColor: \"grey\",\n      },\n    ],\n  },\n  options: {\n    title: {\n      text: \"Years\",\n    },\n  },\n};\n\nexport const gameGenresPerYearsConfig: Chart.ChartConfiguration = {\n  type: \"bar\",\n  data: {\n    labels: stats.gameYears.map((e) => e.year),\n    datasets: stats.gameGenres.map((gameGenre, genreIndex) => ({\n      label: gameGenre.name,\n      data: stats.gameYears.map(\n        (gameYear) =>\n          gameYear.genres[\n            gameYear.genres.findIndex((e) => e.name === gameGenre.name)\n          ].sum\n      ),\n      backgroundColor: palette(\"mpn65\", stats.gameGenres.length).map(\n        (hex: string) => \"#\" + hex\n      )[genreIndex],\n    })),\n  },\n  options: {\n    title: {\n      text: \"Genres per year\",\n    },\n    tooltips: {\n      filter: (tooltipItem) => Number(tooltipItem.value) > 0,\n      intersect: false,\n      mode: \"index\",\n    },\n    scales: {\n      xAxes: [\n        {\n          stacked: true,\n        },\n      ],\n      yAxes: [\n        {\n          stacked: true,\n        },\n      ],\n    },\n  },\n};\n","import Chart from \"chart.js\";\nimport * as React from \"react\";\n\nChart.defaults.global.title!.display = true;\nChart.defaults.global.title!.fontSize = 18;\n\nexport function Infobox({\n  config,\n  large,\n}: {\n  config: Chart.ChartConfiguration;\n  large?: boolean;\n}) {\n  const canvasRef = React.useRef<HTMLCanvasElement>(null);\n  // const [chart, setChart] = React.useState<Chart | null>(null);\n\n  React.useEffect(() => {\n    if (canvasRef.current) {\n      new Chart(canvasRef.current, config);\n      // const newChart = new Chart(canvasRef.current, config);\n      // setChart(newChart);\n    }\n  }, [canvasRef, config]);\n\n  return (\n    <>\n      <div className=\"stats-infobox\">\n        <div className={large ? \"canvas-container-large\" : \"canvas-container\"}>\n          <canvas ref={canvasRef} />\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}