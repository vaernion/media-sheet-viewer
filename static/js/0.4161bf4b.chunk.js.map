{"version":3,"sources":["utils/utilities.js","classes/Creator.js","utils/regex.js","classes/Film.js","classes/Game.js","classes/Television.js","components/Store/mediaSheet.js"],"names":["normalize","str","replace","toLowerCase","sortLastName","a","b","split","pop","localeCompare","formatYear","media","type","seasons","yearStart","length","yearEnd","year","isMedia","mediaType","getCreations","name","context","cFilms","films","filter","e","director","includes","cTv","tv","creator","cGames","games","developer","capitalizeFirstLetter","string","charAt","toUpperCase","slice","Creator","this","id","_count","splitRegex","RegExp","Film","film","title","translatedTitle","sortTitle","push","trim","genre","franchise","filmsJson","map","sortedFilms","_sorts","sort","bool","sortFilms","sortBy","isDescending","algorithm","array","reverse","Game","game","completed","system","gamesJson","sortedGames","sortGames","Television","tvSeries","minutesTotal","Number","reduce","sum","season","seasonMinutes","tvJson","tvSeasons","rawSeason","parseRawSeason","tvNames","Set","tvSeason","filteredSeasons","s","parseSeason","episodes","episodeMinutes","parseInt","sortedTv","sortTv","generateFilmsFromJson","x","i","findIndex","filmsSorted","generateSortedFilms","directorsMatrix","directors","concat","apply","generateTvFromJson","tvSorted","generateSortedTv","generateGamesFromJson","gamesSorted","generateSortedGames","tvCreatorsMatrix","tvCreators","filmAndTvCreators","gameDevelopersMatrix","gameDevelopers","mediaSheet","creators"],"mappings":"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","file":"static/js/0.4161bf4b.chunk.js","sourcesContent":["export const normalize = (str) => {\n  return str\n    .normalize(\"NFD\")\n    .replace(/[^\\w\\s.-_/]/g, \"\")\n    .toLowerCase();\n};\n\nexport const sortLastName = (a, b) => {\n  a = a.split(/\\s+/).pop();\n  b = b.split(/\\s+/).pop();\n  return a.localeCompare(b);\n};\n\nexport const formatYear = (media) => {\n  if (media.type === \"creator\") return null;\n\n  return media.type === \"tv\"\n    ? `(${media.seasons[0].yearStart}-${\n        media.seasons[media.seasons.length - 1].yearEnd\n      })`\n    : `(${media.year})`;\n};\n\nexport const isMedia = (mediaType) => {\n  return mediaType !== \"creators\" && mediaType.type !== \"creator\";\n};\n\nexport const getCreations = (name, context) => {\n  let cFilms = context.films.filter((e) => e.director.includes(name));\n  let cTv = context.tv.filter((e) => e.creator.includes(name));\n  let cGames = context.games.filter((e) => e.developer.includes(name));\n  return [...cFilms, ...cTv, ...cGames];\n};\n\nexport const capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n","// @ts-check\n\nexport class Creator {\n  static _count = 0;\n\n  constructor(name) {\n    this.id = Creator._count += 1;\n    this.type = \"creator\";\n    this.name = name;\n  }\n}\n","export const splitRegex = new RegExp(/[&,/|]+|\\band\\b/);\n","// @ts-check\n\nimport { splitRegex } from \"../utils/regex\";\n\nexport class Film {\n  static _count = 0;\n  static _sorts = [\"sortTitle\", \"year\", \"director\", \"franchise\"];\n\n  constructor(film) {\n    this.id = Film._count += 1;\n    this.type = \"film\";\n    this.title = film[\"Original title (romanized)\"];\n    this.translatedTitle = film[\"This release's translation/title\"];\n    this.sortTitle = film[\"Sort\"];\n    this.director = [];\n    for (let director of film[\"Director(s)\"].split(splitRegex)) {\n      this.director.push(director.trim());\n    }\n    this.genre = [];\n    for (let genre of film[\"Genres\"].split(splitRegex)) {\n      this.genre.push(genre.trim());\n    }\n    this.year = film[\"Year\"];\n    this.franchise = film[\"Series/Universe\"];\n  }\n\n  static generateFilmsFromJson(filmsJson) {\n    return filmsJson.map((film) => new this(film));\n  }\n\n  static generateSortedFilms(films) {\n    const sortedFilms = {};\n\n    for (let sort of this._sorts) {\n      for (let bool of [true, false]) {\n        sortedFilms[`${sort}${bool ? \"Desc\" : \"Asc\"}`] = this.sortFilms(\n          [...films],\n          sort,\n          bool\n        );\n      }\n    }\n\n    return sortedFilms;\n  }\n\n  static sortFilms(films, sortBy, isDescending) {\n    let algorithm = null;\n\n    // title A-Z\n    if (sortBy === \"sortTitle\") {\n      algorithm = (a, b) => a.sortTitle.localeCompare(b.sortTitle);\n      // year 1900-2000\n    } else if (sortBy === \"year\") {\n      algorithm = (a, b) => a.year - b.year;\n      // director A-Z by last name of first director\n    } else if (sortBy === \"director\") {\n      algorithm = (a, b) => {\n        a = a.director[0].split(/\\s+/).pop();\n        b = b.director[0].split(/\\s+/).pop();\n        return a.localeCompare(b);\n      };\n      // franchise, entries without franchise always last\n    } else if (sortBy === \"franchise\") {\n      // franchise A-Z\n      if (!isDescending) {\n        algorithm = (a, b) => {\n          if (a.franchise === \"\") return 1;\n          if (b.franchise === \"\") return -1;\n          return a.franchise.localeCompare(b.franchise);\n        };\n        // franchise Z-A\n      } else {\n        algorithm = (a, b) => {\n          if (a.franchise === \"\") return 1;\n          if (b.franchise === \"\") return -1;\n          return b.franchise.localeCompare(a.franchise);\n        };\n      }\n    }\n\n    if (!algorithm) return films;\n\n    // sort ascending (and descending if franchise)\n    let array = [...films].sort(algorithm);\n\n    // for all except franchise we can just reverse to get descending\n    if (isDescending && [\"sortTitle\", \"year\", \"director\"].includes(sortBy)) {\n      array = array.reverse();\n    }\n\n    return array;\n  }\n}\n","// @ts-check\n\nimport { splitRegex } from \"../utils/regex\";\n\nexport class Game {\n  static _count = 0;\n  static _sorts = [\"sortTitle\", \"year\", \"developer\", \"completed\", \"system\"];\n\n  constructor(game) {\n    this.id = Game._count += 1;\n    this.type = \"game\";\n    this.title = game[\"Title\"];\n    this.sortTitle = game[\"Sort\"];\n    this.developer = [];\n    for (let developer of game[\"Developer(s)\"].split(splitRegex)) {\n      this.developer.push(developer.trim());\n    }\n    this.genre = [];\n    for (let genre of game[\"Genres\"].split(splitRegex)) {\n      this.genre.push(genre.trim());\n    }\n    this.year = game[\"Year\"];\n    this.completed = game[\"completed?\"];\n    this.system = game[\"System\"];\n  }\n\n  static generateGamesFromJson(gamesJson) {\n    return gamesJson.map((game) => new this(game));\n  }\n\n  static generateSortedGames(games) {\n    const sortedGames = {};\n\n    for (let sort of this._sorts) {\n      for (let bool of [true, false]) {\n        sortedGames[`${sort}${bool ? \"Desc\" : \"Asc\"}`] = this.sortGames(\n          [...games],\n          sort,\n          bool\n        );\n      }\n    }\n\n    return sortedGames;\n  }\n\n  static sortGames(games, sortBy, isDescending) {\n    let algorithm = null;\n\n    // title/completed/system A-Z\n    if (\n      sortBy === \"sortTitle\" ||\n      sortBy === \"completed\" ||\n      sortBy === \"system\"\n    ) {\n      algorithm = (a, b) => a[sortBy].localeCompare(b[sortBy]);\n      // year 1900-2000\n    } else if (sortBy === \"year\") {\n      algorithm = (a, b) => a.year - b.year;\n      // developers A-Z by first dev\n    } else if (sortBy === \"developer\") {\n      algorithm = (a, b) => {\n        a = a.developer[0];\n        b = b.developer[0];\n        return a.localeCompare(b);\n      };\n    }\n\n    if (!algorithm) return games;\n\n    // sort ascending\n    let array = [...games].sort(algorithm);\n\n    // reverse to get descending\n    if (isDescending && this._sorts.includes(sortBy)) {\n      array = array.reverse();\n    }\n\n    return array;\n  }\n}\n","// @ts-check\n\nimport { splitRegex } from \"../utils/regex\";\n\nexport class Television {\n  static _count = 0;\n  static _sorts = [\"sortTitle\", \"yearStart\", \"yearEnd\", \"creator\"];\n\n  constructor(tvSeries) {\n    this.id = Television._count += 1;\n    this.type = \"tv\";\n    this.title = tvSeries.title;\n    this.sortTitle = tvSeries.sortTitle;\n    this.creator = tvSeries.creator;\n    this.genre = tvSeries.genre;\n    this.seasons = tvSeries.seasons;\n    this.minutesTotal = Number(\n      this.seasons.reduce((sum, season) => sum + season.seasonMinutes, 0)\n    );\n  }\n\n  static generateTvFromJson(tvJson) {\n    const tvSeasons = tvJson.map((rawSeason) => this.parseRawSeason(rawSeason));\n    const tvNames = [...new Set(tvSeasons.map((tvSeason) => tvSeason.title))];\n\n    const tv = [];\n\n    for (let name of tvNames) {\n      let filteredSeasons = tvSeasons.filter(\n        (tvSeason) => tvSeason.title === name\n      );\n\n      let tvSeries = {\n        title: name,\n        sortTitle: filteredSeasons[0].sortTitle,\n        creator: filteredSeasons[0].creator,\n        genre: filteredSeasons[0].genre,\n        seasons: [],\n      };\n\n      for (let s of filteredSeasons) {\n        tvSeries.seasons.push(this.parseSeason(s));\n      }\n\n      tv.push(new this(tvSeries));\n    }\n\n    return tv;\n  }\n\n  static parseRawSeason(tv) {\n    let rawSeason = {};\n\n    rawSeason.title = tv[\"Original title\"];\n    rawSeason.sortTitle = tv[\"Sort\"];\n    rawSeason.creator = [];\n    for (let creator of tv[\"Creator(s)\"].split(splitRegex)) {\n      rawSeason.creator.push(creator.trim());\n    }\n    rawSeason.genre = [];\n    for (let genre of tv[\"Genres\"].split(splitRegex)) {\n      rawSeason.genre.push(genre.trim());\n    }\n    rawSeason.season = Number(tv[\"S\"]);\n    rawSeason.yearStart = Number(tv[\"Start\"]);\n    rawSeason.yearEnd = Number(tv[\"End\"]);\n    rawSeason.episodes = Number(tv[\"E\"]);\n    rawSeason.episodeMinutes = parseInt(tv[\"Mins\"]);\n\n    return rawSeason;\n  }\n\n  static parseSeason(s) {\n    return {\n      season: s.season,\n      yearStart: s.yearStart,\n      yearEnd: s.yearEnd,\n      episodes: s.episodes,\n      episodeMinutes: s.episodeMinutes,\n      seasonMinutes: s.episodes * s.episodeMinutes,\n    };\n  }\n\n  static generateSortedTv(tv) {\n    const sortedTv = {};\n\n    for (let sort of this._sorts) {\n      for (let bool of [true, false]) {\n        sortedTv[`${sort}${bool ? \"Desc\" : \"Asc\"}`] = this.sortTv(\n          [...tv],\n          sort,\n          bool\n        );\n      }\n    }\n\n    return sortedTv;\n  }\n\n  static sortTv(tv, sortBy, isDescending) {\n    let algorithm = null;\n\n    // title A-Z\n    if (sortBy === \"sortTitle\") {\n      algorithm = (a, b) => a.sortTitle.localeCompare(b.sortTitle);\n      // year 1900-2000 start first season\n    } else if (sortBy === \"yearStart\") {\n      algorithm = (a, b) => a.seasons[0].yearStart - b.seasons[0].yearStart;\n      // year 1900-2000 end last season\n    } else if (sortBy === \"yearEnd\") {\n      algorithm = (a, b) =>\n        a.seasons[a.seasons.length - 1].yearEnd -\n        b.seasons[b.seasons.length - 1].yearEnd;\n      // creator A-Z by last name of first creator\n    } else if (sortBy === \"creator\") {\n      algorithm = (a, b) => {\n        a = a.creator[0].split(/\\s+/).pop();\n        b = b.creator[0].split(/\\s+/).pop();\n        return a.localeCompare(b);\n      };\n    }\n\n    if (!algorithm) return tv;\n\n    // sort ascending\n    let array = [...tv].sort(algorithm);\n\n    // reverse to get descending\n    if (isDescending && this._sorts.includes(sortBy)) {\n      array = array.reverse();\n    }\n\n    return array;\n  }\n}\n","import { Creator } from \"../../classes/Creator\";\nimport { Film } from \"../../classes/Film\";\nimport { Game } from \"../../classes/Game\";\nimport { Television } from \"../../classes/Television\";\nimport filmsJson from \"../../data/films.json\";\nimport gamesJson from \"../../data/games.json\";\nimport tvJson from \"../../data/tv.json\";\nimport { sortLastName } from \"../../utils/utilities\";\n\n// films\nconst films = Film.generateFilmsFromJson(filmsJson).filter(\n  (x, i, a) =>\n    a.findIndex((e) => e.title === x.title && e.year === x.year) === i\n);\nconst filmsSorted = Film.generateSortedFilms(films);\n// console.info(\n//   `films.length: ${films.length} filmsSorted: ${Object.keys(filmsSorted)}`\n// );\n\n// film directors\nconst directorsMatrix = films.map((e) => e.director);\nconst directors = [...new Set([].concat.apply([], directorsMatrix))].sort(\n  sortLastName\n);\n// console.info(`directors.length: ${directors.length}`);\n\n// tv\nconst tv = Television.generateTvFromJson(tvJson);\nconst tvSorted = Television.generateSortedTv(tv);\n// console.info(`tv.length: ${tv.length} tvSorted: ${Object.keys(tvSorted)}`);\n\n// games\nconst games = Game.generateGamesFromJson(gamesJson).filter(\n  (x, i, a) =>\n    a.findIndex((e) => e.title === x.title && e.year === x.year) === i\n);\nconst gamesSorted = Game.generateSortedGames(games);\n// console.info(\n//   `games.length: ${games.length} gamesSorted: ${Object.keys(gamesSorted)}`\n// );\n\n// console.time(\"matrix fiesta\");\nconst tvCreatorsMatrix = tv.map((e) => e.creator);\nconst tvCreators = [...new Set([].concat.apply([], tvCreatorsMatrix))];\nconst filmAndTvCreators = [...new Set([...directors, ...tvCreators])].sort(\n  sortLastName\n);\n\nconst gameDevelopersMatrix = games.map((e) => e.developer);\nconst gameDevelopers = [\n  ...new Set([].concat.apply([], gameDevelopersMatrix)),\n].sort();\n// .map((e) => {\n//   return { name: e, type: \"Studio\" };\n// });\n// console.log(gameDevelopers[1]);\n\nconst creators = [...new Set([...filmAndTvCreators, ...gameDevelopers])].map(\n  (name) => new Creator(name)\n);\n// console.timeEnd(\"matrix fiesta\");\n\n// console.info(\n//   \"directors\",\n//   directors.length,\n//   \"tvCreators\",\n//   tvCreators.length,\n//   \"filmAndTv\",\n//   filmAndTvCreators.length,\n//   \"gameDevs\",\n//   gameDevelopers.length,\n//   \"all\",\n//   creators.length\n// );\n\nexport const mediaSheet = {\n  films,\n  filmsSorted,\n  directors,\n  tv,\n  tvSorted,\n  games,\n  gamesSorted,\n  creators,\n};\n\n// console.info(`mediaSheet: ${Object.keys(mediaSheet)}`);\n"],"sourceRoot":""}