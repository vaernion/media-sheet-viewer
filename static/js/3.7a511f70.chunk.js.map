{"version":3,"sources":["components/FilmList/FieldHeader.jsx","components/FilmList/FilmListItem.jsx","components/FilmList/SearchForm.jsx","components/FilmList/index.jsx"],"names":["FieldHeader","props","active","sort","sortBy","field","arrow","sortReverse","className","onClick","onclick","label","FilmListItem","film","to","id","title","year","director","map","name","key","genre","setSearchField","franchise","SearchForm","type","placeholder","value","onChange","e","currentTarget","length","setValue","FilmList","context","React","MediaContext","setSortBy","setSortReverse","searchField","sortedFilms","setSortedFilms","document","films","filmsSorted","titleDesc","titleAsc","yearDesc","yearAsc","directorDesc","directorAsc","franchiseDesc","franchiseAsc","handleSort","toLowerCase","startsWith","filter","findIndex","includes","replace","toString","filterFilms"],"mappings":"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","file":"static/js/3.7a511f70.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport function FieldHeader(props) {\n  let active = props.sort.sortBy === props.field ? true : false;\n  let arrow = active ? (props.sort.sortReverse ? \"↑\" : \"↓\") : null;\n\n  return (\n    <>\n      <div className={\"fieldHeader film-\" + props.field}>\n        <span\n          className={\"fieldHeaderName\" + (active ? \" active\" : \"\")}\n          onClick={props.onclick ? () => props.onclick(props.field) : null}\n        >\n          {props.label} {arrow}\n        </span>\n      </div>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./filmsList.css\";\n\nexport function FilmListItem(props) {\n  const film = props.film;\n\n  return (\n    <>\n      <div className=\"filmListItem\">\n        <span className=\"filmTitle\">\n          <Link to={`/films/${film.id}`}>\n            {/* {film.id}-- */}\n            {film.title}\n          </Link>\n        </span>\n        <span className=\"filmYear\">{film.year}</span>\n        <span className=\"filmDirector\">\n          {film.director.map((name) => (\n            <span key={name} className=\"filmDirectorName\">\n              {name}\n            </span>\n          ))}\n        </span>\n        <span className=\"filmGenre\">\n          {film.genre.map((name) => (\n            <span\n              key={name}\n              className=\"filmGenreName\"\n              onClick={() => props.setSearchField(\"g:\" + name)}\n            >\n              {name}\n            </span>\n          ))}\n        </span>\n        <span className=\"filmFranchise\">{film.franchise}</span>\n      </div>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport \"./searchForm.css\";\n\nexport function SearchForm(props) {\n  const handleChange = (e) => {\n    if (\n      e.currentTarget.value.length >= 2 ||\n      e.currentTarget.value.length === 0\n    ) {\n      props.setValue(e.currentTarget.value);\n    }\n  };\n\n  const handleClear = (e) => {\n    props.setValue(\"\");\n  };\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        placeholder=\"examples: star wars | g:drama | hitchcock | y:2010\"\n        value={props.value}\n        onChange={handleChange}\n      />\n      <button onClick={handleClear}>Clear</button>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { MediaContext } from \"../Store\";\nimport { FieldHeader } from \"./FieldHeader\";\nimport { FilmListItem } from \"./FilmListItem\";\nimport \"./filmsList.css\";\nimport { SearchForm } from \"./SearchForm\";\n\nexport default function FilmList() {\n  const context = React.useContext(MediaContext);\n\n  const [sortBy, setSortBy] = React.useState(\"sortTitle\");\n  const [sortReverse, setSortReverse] = React.useState(false);\n  const [searchField, setSearchField] = React.useState(\"\");\n  const [sortedFilms, setSortedFilms] = React.useState(null);\n\n  document.title = `${context.films.length} Films - MediaSheetViewer`;\n\n  React.useEffect(() => {\n    setSortedFilms(\n      (() => {\n        const sort = context.filmsSorted;\n        switch (sortBy) {\n          case \"sortTitle\":\n            return sortReverse ? sort.titleDesc : sort.titleAsc;\n          case \"year\":\n            return sortReverse ? sort.yearDesc : sort.yearAsc;\n          case \"director\":\n            return sortReverse ? sort.directorDesc : sort.directorAsc;\n          case \"franchise\":\n            return sortReverse ? sort.franchiseDesc : sort.franchiseAsc;\n          default:\n            return context.films;\n        }\n      })()\n    );\n  }, [sortBy, sortReverse, context.films, context.filmsSorted]);\n\n  const handleSort = (field) => {\n    if (field === sortBy) setSortReverse(!sortReverse);\n    else {\n      setSortReverse(false);\n      setSortBy(field);\n    }\n  };\n\n  const filterFilms = (sortedFilms, searchField) => {\n    if (searchField.toLowerCase().startsWith(\"g:\")) {\n      return sortedFilms.filter(\n        (film) =>\n          film.genre.findIndex((genre) =>\n            genre\n              .toLowerCase()\n              .includes(searchField.toLowerCase().replace(\"g:\", \"\"))\n          ) !== -1\n      );\n    } else if (searchField.toLowerCase().startsWith(\"y:\")) {\n      return sortedFilms.filter(\n        (film) => film.year.toString() === searchField.replace(\"y:\", \"\")\n      );\n    } else {\n      return sortedFilms.filter(\n        (film) =>\n          film.title.toLowerCase().includes(searchField.toLowerCase()) ||\n          film.director.findIndex((director) =>\n            director.toLowerCase().includes(searchField.toLowerCase())\n          ) !== -1\n      );\n    }\n  };\n\n  if (!sortedFilms) return null;\n\n  const films = (() => {\n    if (searchField.length > 2) {\n      return filterFilms(sortedFilms, searchField);\n    } else {\n      return sortedFilms;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"filmHeaderContainer\">\n        <div className=\"searchWrapper\">\n          <SearchForm value={searchField} setValue={setSearchField} />\n        </div>\n        <div className=\"fieldHeadersContainer\">\n          <FieldHeader\n            field=\"sortTitle\"\n            label=\"Title\"\n            onclick={handleSort}\n            sort={{ sortBy, sortReverse }}\n          />\n          <FieldHeader\n            field=\"year\"\n            label=\"Year\"\n            onclick={handleSort}\n            sort={{ sortBy, sortReverse }}\n          />\n          <FieldHeader\n            field=\"director\"\n            label=\"Director\"\n            onclick={handleSort}\n            sort={{ sortBy, sortReverse }}\n          />\n          <FieldHeader\n            field=\"genre\"\n            label=\"Genre\"\n            sort={{ sortBy, sortReverse }}\n          />\n          <FieldHeader\n            field=\"franchise\"\n            label=\"Franchise\"\n            onclick={handleSort}\n            sort={{ sortBy, sortReverse }}\n          />\n        </div>\n      </div>\n      <div className=\"filmBodyContainer\">\n        {films\n          // .filter((e) => e.id > 800 && e.id < 1000)\n          .map((film) => (\n            <FilmListItem\n              key={film.id}\n              film={film}\n              setSearchField={setSearchField}\n            />\n          ))}\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}