{"version":3,"sources":["utils/utilities.js","classes/Creator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","utils/regex.js","classes/Film.js","classes/Game.js","classes/Television.js","components/Store/mediaSheet.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["normalize","str","replace","toLowerCase","sortLastName","a","b","split","pop","localeCompare","formatYear","media","type","seasons","yearStart","length","yearEnd","year","isMedia","mediaType","getCreations","name","context","cFilms","films","filter","e","director","includes","cTv","tv","creator","cGames","games","developer","capitalizeFirstLetter","string","charAt","toUpperCase","slice","Creator","this","id","_count","_createForOfIteratorHelper","o","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","done","value","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","splitRegex","RegExp","Film","film","title","translatedTitle","sortTitle","push","trim","genre","franchise","filmsJson","map","sortedFilms","_sorts","sort","bool","sortFilms","sortBy","isDescending","algorithm","array","reverse","Game","game","completed","system","gamesJson","sortedGames","sortGames","Television","tvSeries","minutesTotal","Number","reduce","sum","season","seasonMinutes","tvJson","tvSeasons","rawSeason","parseRawSeason","tvNames","Set","tvSeason","filteredSeasons","parseSeason","episodes","episodeMinutes","parseInt","sortedTv","sortTv","generateFilmsFromJson","x","findIndex","filmsSorted","generateSortedFilms","directorsMatrix","directors","concat","apply","generateTvFromJson","tvSorted","generateSortedTv","generateGamesFromJson","gamesSorted","generateSortedGames","tvCreatorsMatrix","tvCreators","filmAndTvCreators","gameDevelopersMatrix","gameDevelopers","mediaSheet","creators","_toConsumableArray","arr","arrayLikeToArray","iter","Object","from"],"mappings":"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","file":"static/js/0.4997f91f.chunk.js","sourcesContent":["export const normalize = (str) => {\n  return str\n    .normalize(\"NFD\")\n    .replace(/[^\\w\\s.-_/]/g, \"\")\n    .toLowerCase();\n};\n\nexport const sortLastName = (a, b) => {\n  a = a.split(/\\s+/).pop();\n  b = b.split(/\\s+/).pop();\n  return a.localeCompare(b);\n};\n\nexport const formatYear = (media) => {\n  if (media.type === \"creator\") return null;\n\n  return media.type === \"tv\"\n    ? `(${media.seasons[0].yearStart}-${\n        media.seasons[media.seasons.length - 1].yearEnd\n      })`\n    : `(${media.year})`;\n};\n\nexport const isMedia = (mediaType) => {\n  return mediaType !== \"creators\" && mediaType.type !== \"creator\";\n};\n\nexport const getCreations = (name, context) => {\n  let cFilms = context.films.filter((e) => e.director.includes(name));\n  let cTv = context.tv.filter((e) => e.creator.includes(name));\n  let cGames = context.games.filter((e) => e.developer.includes(name));\n  return [...cFilms, ...cTv, ...cGames];\n};\n\nexport const capitalizeFirstLetter = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n","// @ts-check\n\nexport class Creator {\n  static _count = 0;\n\n  constructor(name) {\n    this.id = Creator._count += 1;\n    this.type = \"creator\";\n    this.name = name;\n  }\n}\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export const splitRegex = new RegExp(/[&,/|]+|\\band\\b/);\n","// @ts-check\n\nimport { splitRegex } from \"../utils/regex\";\n\nexport class Film {\n  static _count = 0;\n  static _sorts = [\"sortTitle\", \"year\", \"director\", \"franchise\"];\n\n  constructor(film) {\n    this.id = Film._count += 1;\n    this.type = \"film\";\n    this.title = film[\"Original title (romanized)\"];\n    this.translatedTitle = film[\"This release's translation/title\"];\n    this.sortTitle = film[\"Sort\"];\n    this.director = [];\n    for (let director of film[\"Director(s)\"].split(splitRegex)) {\n      this.director.push(director.trim());\n    }\n    this.genre = [];\n    for (let genre of film[\"Genres\"].split(splitRegex)) {\n      this.genre.push(genre.trim());\n    }\n    this.year = film[\"Year\"];\n    this.franchise = film[\"Series/Universe\"];\n  }\n\n  static generateFilmsFromJson(filmsJson) {\n    return filmsJson.map((film) => new this(film));\n  }\n\n  static generateSortedFilms(films) {\n    const sortedFilms = {};\n\n    for (let sort of this._sorts) {\n      for (let bool of [true, false]) {\n        sortedFilms[`${sort}${bool ? \"Desc\" : \"Asc\"}`] = this.sortFilms(\n          [...films],\n          sort,\n          bool\n        );\n      }\n    }\n\n    return sortedFilms;\n  }\n\n  static sortFilms(films, sortBy, isDescending) {\n    let algorithm = null;\n\n    // title A-Z\n    if (sortBy === \"sortTitle\") {\n      algorithm = (a, b) => a.sortTitle.localeCompare(b.sortTitle);\n      // year 1900-2000\n    } else if (sortBy === \"year\") {\n      algorithm = (a, b) => a.year - b.year;\n      // director A-Z by last name of first director\n    } else if (sortBy === \"director\") {\n      algorithm = (a, b) => {\n        a = a.director[0].split(/\\s+/).pop();\n        b = b.director[0].split(/\\s+/).pop();\n        return a.localeCompare(b);\n      };\n      // franchise, entries without franchise always last\n    } else if (sortBy === \"franchise\") {\n      // franchise A-Z\n      if (!isDescending) {\n        algorithm = (a, b) => {\n          if (a.franchise === \"\") return 1;\n          if (b.franchise === \"\") return -1;\n          return a.franchise.localeCompare(b.franchise);\n        };\n        // franchise Z-A\n      } else {\n        algorithm = (a, b) => {\n          if (a.franchise === \"\") return 1;\n          if (b.franchise === \"\") return -1;\n          return b.franchise.localeCompare(a.franchise);\n        };\n      }\n    }\n\n    if (!algorithm) return films;\n\n    // sort ascending (and descending if franchise)\n    let array = [...films].sort(algorithm);\n\n    // for all except franchise we can just reverse to get descending\n    if (isDescending && [\"sortTitle\", \"year\", \"director\"].includes(sortBy)) {\n      array = array.reverse();\n    }\n\n    return array;\n  }\n}\n","// @ts-check\n\nimport { splitRegex } from \"../utils/regex\";\n\nexport class Game {\n  static _count = 0;\n  static _sorts = [\"sortTitle\", \"year\", \"developer\", \"completed\", \"system\"];\n\n  constructor(game) {\n    this.id = Game._count += 1;\n    this.type = \"game\";\n    this.title = game[\"Title\"];\n    this.sortTitle = game[\"Sort\"];\n    this.developer = [];\n    for (let developer of game[\"Developer(s)\"].split(splitRegex)) {\n      this.developer.push(developer.trim());\n    }\n    this.genre = [];\n    for (let genre of game[\"Genres\"].split(splitRegex)) {\n      this.genre.push(genre.trim());\n    }\n    this.year = game[\"Year\"];\n    this.completed = game[\"completed?\"];\n    this.system = game[\"System\"];\n  }\n\n  static generateGamesFromJson(gamesJson) {\n    return gamesJson.map((game) => new this(game));\n  }\n\n  static generateSortedGames(games) {\n    const sortedGames = {};\n\n    for (let sort of this._sorts) {\n      for (let bool of [true, false]) {\n        sortedGames[`${sort}${bool ? \"Desc\" : \"Asc\"}`] = this.sortGames(\n          [...games],\n          sort,\n          bool\n        );\n      }\n    }\n\n    return sortedGames;\n  }\n\n  static sortGames(games, sortBy, isDescending) {\n    let algorithm = null;\n\n    // title/completed/system A-Z\n    if (\n      sortBy === \"sortTitle\" ||\n      sortBy === \"completed\" ||\n      sortBy === \"system\"\n    ) {\n      algorithm = (a, b) => a[sortBy].localeCompare(b[sortBy]);\n      // year 1900-2000\n    } else if (sortBy === \"year\") {\n      algorithm = (a, b) => a.year - b.year;\n      // developers A-Z by first dev\n    } else if (sortBy === \"developer\") {\n      algorithm = (a, b) => {\n        a = a.developer[0];\n        b = b.developer[0];\n        return a.localeCompare(b);\n      };\n    }\n\n    if (!algorithm) return games;\n\n    // sort ascending\n    let array = [...games].sort(algorithm);\n\n    // reverse to get descending\n    if (isDescending && this._sorts.includes(sortBy)) {\n      array = array.reverse();\n    }\n\n    return array;\n  }\n}\n","// @ts-check\n\nimport { splitRegex } from \"../utils/regex\";\n\nexport class Television {\n  static _count = 0;\n  static _sorts = [\"sortTitle\", \"yearStart\", \"yearEnd\", \"creator\"];\n\n  constructor(tvSeries) {\n    this.id = Television._count += 1;\n    this.type = \"tv\";\n    this.title = tvSeries.title;\n    this.sortTitle = tvSeries.sortTitle;\n    this.creator = tvSeries.creator;\n    this.genre = tvSeries.genre;\n    this.seasons = tvSeries.seasons;\n    this.minutesTotal = Number(\n      this.seasons.reduce((sum, season) => sum + season.seasonMinutes, 0)\n    );\n  }\n\n  static generateTvFromJson(tvJson) {\n    const tvSeasons = tvJson.map((rawSeason) => this.parseRawSeason(rawSeason));\n    const tvNames = [...new Set(tvSeasons.map((tvSeason) => tvSeason.title))];\n\n    const tv = [];\n\n    for (let name of tvNames) {\n      let filteredSeasons = tvSeasons.filter(\n        (tvSeason) => tvSeason.title === name\n      );\n\n      let tvSeries = {\n        title: name,\n        sortTitle: filteredSeasons[0].sortTitle,\n        creator: filteredSeasons[0].creator,\n        genre: filteredSeasons[0].genre,\n        seasons: [],\n      };\n\n      for (let s of filteredSeasons) {\n        tvSeries.seasons.push(this.parseSeason(s));\n      }\n\n      tv.push(new this(tvSeries));\n    }\n\n    return tv;\n  }\n\n  static parseRawSeason(tv) {\n    let rawSeason = {};\n\n    rawSeason.title = tv[\"Original title\"];\n    rawSeason.sortTitle = tv[\"Sort\"];\n    rawSeason.creator = [];\n    for (let creator of tv[\"Creator(s)\"].split(splitRegex)) {\n      rawSeason.creator.push(creator.trim());\n    }\n    rawSeason.genre = [];\n    for (let genre of tv[\"Genres\"].split(splitRegex)) {\n      rawSeason.genre.push(genre.trim());\n    }\n    rawSeason.season = Number(tv[\"S\"]);\n    rawSeason.yearStart = Number(tv[\"Start\"]);\n    rawSeason.yearEnd = Number(tv[\"End\"]);\n    rawSeason.episodes = Number(tv[\"E\"]);\n    rawSeason.episodeMinutes = parseInt(tv[\"Mins\"]);\n\n    return rawSeason;\n  }\n\n  static parseSeason(s) {\n    return {\n      season: s.season,\n      yearStart: s.yearStart,\n      yearEnd: s.yearEnd,\n      episodes: s.episodes,\n      episodeMinutes: s.episodeMinutes,\n      seasonMinutes: s.episodes * s.episodeMinutes,\n    };\n  }\n\n  static generateSortedTv(tv) {\n    const sortedTv = {};\n\n    for (let sort of this._sorts) {\n      for (let bool of [true, false]) {\n        sortedTv[`${sort}${bool ? \"Desc\" : \"Asc\"}`] = this.sortTv(\n          [...tv],\n          sort,\n          bool\n        );\n      }\n    }\n\n    return sortedTv;\n  }\n\n  static sortTv(tv, sortBy, isDescending) {\n    let algorithm = null;\n\n    // title A-Z\n    if (sortBy === \"sortTitle\") {\n      algorithm = (a, b) => a.sortTitle.localeCompare(b.sortTitle);\n      // year 1900-2000 start first season\n    } else if (sortBy === \"yearStart\") {\n      algorithm = (a, b) => a.seasons[0].yearStart - b.seasons[0].yearStart;\n      // year 1900-2000 end last season\n    } else if (sortBy === \"yearEnd\") {\n      algorithm = (a, b) =>\n        a.seasons[a.seasons.length - 1].yearEnd -\n        b.seasons[b.seasons.length - 1].yearEnd;\n      // creator A-Z by last name of first creator\n    } else if (sortBy === \"creator\") {\n      algorithm = (a, b) => {\n        a = a.creator[0].split(/\\s+/).pop();\n        b = b.creator[0].split(/\\s+/).pop();\n        return a.localeCompare(b);\n      };\n    }\n\n    if (!algorithm) return tv;\n\n    // sort ascending\n    let array = [...tv].sort(algorithm);\n\n    // reverse to get descending\n    if (isDescending && this._sorts.includes(sortBy)) {\n      array = array.reverse();\n    }\n\n    return array;\n  }\n}\n","import { Creator } from \"../../classes/Creator\";\nimport { Film } from \"../../classes/Film\";\nimport { Game } from \"../../classes/Game\";\nimport { Television } from \"../../classes/Television\";\nimport filmsJson from \"../../data/films.json\";\nimport gamesJson from \"../../data/games.json\";\nimport tvJson from \"../../data/tv.json\";\nimport { sortLastName } from \"../../utils/utilities\";\n\n// films\nconst films = Film.generateFilmsFromJson(filmsJson).filter(\n  (x, i, a) =>\n    a.findIndex((e) => e.title === x.title && e.year === x.year) === i\n);\nconst filmsSorted = Film.generateSortedFilms(films);\n// console.info(\n//   `films.length: ${films.length} filmsSorted: ${Object.keys(filmsSorted)}`\n// );\n\n// film directors\nconst directorsMatrix = films.map((e) => e.director);\nconst directors = [...new Set([].concat.apply([], directorsMatrix))].sort(\n  sortLastName\n);\n// console.info(`directors.length: ${directors.length}`);\n\n// tv\nconst tv = Television.generateTvFromJson(tvJson);\nconst tvSorted = Television.generateSortedTv(tv);\n// console.info(`tv.length: ${tv.length} tvSorted: ${Object.keys(tvSorted)}`);\n\n// games\nconst games = Game.generateGamesFromJson(gamesJson).filter(\n  (x, i, a) =>\n    a.findIndex((e) => e.title === x.title && e.year === x.year) === i\n);\nconst gamesSorted = Game.generateSortedGames(games);\n// console.info(\n//   `games.length: ${games.length} gamesSorted: ${Object.keys(gamesSorted)}`\n// );\n\n// console.time(\"matrix fiesta\");\nconst tvCreatorsMatrix = tv.map((e) => e.creator);\nconst tvCreators = [...new Set([].concat.apply([], tvCreatorsMatrix))];\nconst filmAndTvCreators = [...new Set([...directors, ...tvCreators])].sort(\n  sortLastName\n);\n\nconst gameDevelopersMatrix = games.map((e) => e.developer);\nconst gameDevelopers = [\n  ...new Set([].concat.apply([], gameDevelopersMatrix)),\n].sort();\n// .map((e) => {\n//   return { name: e, type: \"Studio\" };\n// });\n// console.log(gameDevelopers[1]);\n\nconst creators = [...new Set([...filmAndTvCreators, ...gameDevelopers])].map(\n  (name) => new Creator(name)\n);\n// console.timeEnd(\"matrix fiesta\");\n\n// console.info(\n//   \"directors\",\n//   directors.length,\n//   \"tvCreators\",\n//   tvCreators.length,\n//   \"filmAndTv\",\n//   filmAndTvCreators.length,\n//   \"gameDevs\",\n//   gameDevelopers.length,\n//   \"all\",\n//   creators.length\n// );\n\nexport const mediaSheet = {\n  films,\n  filmsSorted,\n  directors,\n  tv,\n  tvSorted,\n  games,\n  gamesSorted,\n  creators,\n};\n\n// console.info(`mediaSheet: ${Object.keys(mediaSheet)}`);\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}